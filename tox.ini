# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
env_list = lint, unit

[vars]
tests_path = "{tox_root}/tests"
terraform_path = "{tox_root}/terraform"
all_path = {[vars]tests_path}

[testenv]
set_env =
    PY_COLORS=1
allowlist_externals =
    poetry
    terraform

[testenv:format]
description = Apply coding style standards to code
commands_pre =
    poetry install --only format
commands =
    poetry lock
    poetry run ruff check --fix {[vars]all_path}
    poetry run ruff format {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands_pre =
    poetry install --only lint,format
commands =
    poetry check --lock
    poetry run codespell {[vars]all_path}
    poetry run ruff check {[vars]all_path}
    poetry run ruff format --check --diff {[vars]all_path}

[testenv:lint-terraform]
description = Check code against Terraform style standards
commands =
    terraform fmt -check -diff -recursive {[vars]terraform_path}
    terraform -chdir={[vars]terraform_path} init -backend=false
    terraform -chdir={[vars]terraform_path} validate

[testenv:integration]
description = Run integration tests
set_env =
    {[testenv]set_env}
    # Workaround for https://github.com/python-poetry/poetry/issues/6958
    POETRY_INSTALLER_PARALLEL = false
pass_env =
    CI
    GITHUB_OUTPUT
    SECRETS_FROM_GITHUB
commands_pre =
    poetry install --only integration
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s --ignore={[vars]tests_path}/unit/ {posargs}
